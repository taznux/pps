---------------------------------- page 1 ----------------------------------
#### DownExpandingContainer('title')
  Paragraph('Pyplanscoring Documentation', style='title page title')
       > (0,0,1,0,2) title page title
         (0,0,0,0,2) body
    SingleStyledText('Pyplanscoring Documentation')
  Paragraph('Release 0.1.0', style='title page subtitle')
       > (0,0,1,0,2) title page subtitle
         (0,0,0,0,2) body
    SingleStyledText('Release 0.1.0')
  Paragraph('Victor Gabriel Leandro Alves, D....', style='title page author')
       > (0,0,1,0,2) title page author
         (0,0,0,0,2) body
    SingleStyledText('Victor Gabriel Leandro Alves, D....')
  Paragraph('May 16, 2018', style='title page date')
       > (0,0,1,0,2) title page date
         (0,0,0,0,2) body
    SingleStyledText('May 16, 2018')
---------------------------------- page i ----------------------------------
#### FlowablesContainer('chapter title')
  Paragraph('Table of Contents', style='front matter section title')
       > (0,0,1,0,2) front matter section title
         (0,0,0,0,2) body
    Field('Table of Contents')
      SingleStyledText('Table of Contents')
#### ChainedContainer('column1')
  TableOfContentsSection(style='table of contents')
       > (0,0,1,0,1) table of contents section
         (0,0,0,1,1) chapter
    TableOfContents()   table of contents
         > (0,0,0,0,2) table of contents
      TableOfContentsEntry('1	Introduction	1')
           > (0,0,0,1,2) toc level 1
          MixedStyledText('1	Introduction	1')
            ReferenceField('1')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('1')
            Tab('	')
            ReferenceField('Introduction')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('Introduction')
            Tab('	')
            ReferenceField('1')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('1')
      TableOfContentsEntry('2	Motivation	3')
           > (0,0,0,1,2) toc level 1
          MixedStyledText('2	Motivation	3')
            ReferenceField('2')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('2')
            Tab('	')
            ReferenceField('Motivation')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('Motivation')
            Tab('	')
            ReferenceField('3')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('3')
      TableOfContentsEntry('3	Where to from here?	5')
           > (0,0,0,1,2) toc level 1
          MixedStyledText('3	Where to from here?	5')
            ReferenceField('3')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('3')
            Tab('	')
            ReferenceField('Where to from here?')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('Where to from here?')
            Tab('	')
            ReferenceField('5')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('5')
      TableOfContentsEntry('3.1	User Manual	5')
           > (0,0,0,1,2) toc level 2
          MixedStyledText('3.1	User Manual	5')
            ReferenceField('3.1')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('3.1')
            Tab('	')
            ReferenceField('User Manual')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('User Manual')
            Tab('	')
            ReferenceField('5')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('5')
      TableOfContentsEntry('3.2	Contributing to PyPlanScorin...')
           > (0,0,0,1,2) toc level 2
          MixedStyledText('3.2	Contributing to PyPlanScorin...')
            ReferenceField('3.2')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('3.2')
            Tab('	')
            ReferenceField('Contributing to PyPlanScoring')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('Contributing to PyPlanScoring')
            Tab('	')
            ReferenceField('10')
                 x (0,0,0,1,3) toc linked reference
                 > (0,0,0,1,1) linked reference
              SingleStyledText('10')
#### DownExpandingContainer('footer')
  Footer('		i')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('		i')
      Tab('	')
      Tab('	')
      Field('i')
        SingleStyledText('i')
---------------------------------- page 1 ----------------------------------
#### FlowablesContainer('chapter title')
  Paragraph('CHAPTER 1', style='body matter chapter label')
       > (0,0,1,0,2) body matter chapter label
         (0,0,0,0,2) body
    MixedStyledText('CHAPTER 1')
      MixedStyledText('CHAPTER ')
        StringField('CHAPTER')
        SingleStyledText(' ')
      Field('1', style='number')
           > (0,0,2,0,3) body matter chapter number
        SingleStyledText('1')
  Paragraph('Introduction', style='body matter chapter title')
       > (0,0,1,0,2) body matter chapter title
         (0,0,0,0,2) body
    Field('Introduction')
      SingleStyledText('Introduction')
#### ChainedContainer('column1')
  DocumentTree()
    Section(id='introduction')   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:5 <section>
         > (0,0,0,1,2) chapter
      Paragraph('PyPlanScoring (PPS) package is s...')   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:6 <paragraph>
           > (0,0,0,0,2) body
        MixedStyledText('PyPlanScoring (PPS) package is s...')
          SingleStyledText('PyPlanScoring (PPS) package is s...')
          AnnotatedText('dicompyler-core package:', style='external link')   None:None <reference>
               > (0,0,1,0,1) external hyperlink
            MixedStyledText('dicompyler-core package:')
              SingleStyledText('dicompyler-core package:')
          AnnotatedText('')   None:None <target>
            MixedStyledText('')
          SingleStyledText(' to perform structure volume ove...')
          AnnotatedText('Radiation Knowledge', style='external link')   None:None <reference>
               > (0,0,1,0,1) external hyperlink
            MixedStyledText('Radiation Knowledge')
              SingleStyledText('Radiation Knowledge')
          AnnotatedText('')   None:None <target>
            MixedStyledText('')
          SingleStyledText('.')
#### DownExpandingContainer('footer')
  Footer('		1')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('		1')
      Tab('	')
      Tab('	')
      Field('1')
        SingleStyledText('1')
---------------------------------- page 2 ----------------------------------
#### ChainedContainer('column1')
  (continued) DocumentTree()
#### UpExpandingContainer('header')
  Header('Pyplanscoring Documentation, Rel...')
       > (0,0,0,0,2) header
         (0,0,0,0,1) body
    MixedStyledText('Pyplanscoring Documentation, Rel...')
      Field('Pyplanscoring Documentation')
        SingleStyledText('Pyplanscoring Documentation')
      SingleStyledText(', ')
      Field('Release 0.1.0')
        SingleStyledText('Release 0.1.0')
#### DownExpandingContainer('footer')
  Footer('2		Chapter 1.  Introduction')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('2		Chapter 1.  Introduction')
      Field('2')
        SingleStyledText('2')
      Tab('	')
      Tab('	')
      StringField('Chapter')
      SingleStyledText(' ')
      Field('1')
        SingleStyledText('1')
      SingleStyledText('.  ')
      Field('Introduction')
        SingleStyledText('Introduction')
---------------------------------- page 3 ----------------------------------
#### FlowablesContainer('chapter title')
  Paragraph('CHAPTER 2', style='body matter chapter label')
       > (0,0,1,0,2) body matter chapter label
         (0,0,0,0,2) body
    MixedStyledText('CHAPTER 2')
      MixedStyledText('CHAPTER ')
        StringField('CHAPTER')
        SingleStyledText(' ')
      Field('2', style='number')
           > (0,0,2,0,3) body matter chapter number
        SingleStyledText('2')
  Paragraph('Motivation', style='body matter chapter title')
       > (0,0,1,0,2) body matter chapter title
         (0,0,0,0,2) body
    Field('Motivation')
      SingleStyledText('Motivation')
#### ChainedContainer('column1')
  (continued) DocumentTree()
    Section(id='motivation')   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:14 <section>
         > (0,0,0,1,2) chapter
      Paragraph('To develop a Python API to estim...')   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:16 <paragraph>
           > (0,0,0,0,2) body
        MixedStyledText('To develop a Python API to estim...')
          SingleStyledText('To develop a Python API to estim...')
          AnnotatedText('Scipy', style='external link')   None:None <reference>
               > (0,0,1,0,1) external hyperlink
            MixedStyledText('Scipy')
              SingleStyledText('Scipy')
          AnnotatedText('')   None:None <target>
            MixedStyledText('')
          SingleStyledText(', ')
          AnnotatedText('Numpy', style='external link')   None:None <reference>
               > (0,0,1,0,1) external hyperlink
            MixedStyledText('Numpy')
              SingleStyledText('Numpy')
          AnnotatedText('')   None:None <target>
            MixedStyledText('')
          SingleStyledText(' and ')
          AnnotatedText('Numba', style='external link')   None:None <reference>
               > (0,0,1,0,1) external hyperlink
            MixedStyledText('Numba')
              SingleStyledText('Numba')
          AnnotatedText('')   None:None <target>
            MixedStyledText('')
          SingleStyledText(' which supports compilation of P...')
          AnnotatedText('AAPM Report No. 263 - Standarizi...', style='external link')   None:None <reference>
               > (0,0,1,0,1) external hyperlink
            MixedStyledText('AAPM Report No. 263 - Standarizi...')
              SingleStyledText('AAPM Report No. 263 - Standarizi...')
          AnnotatedText('')   None:None <target>
            MixedStyledText('')
          SingleStyledText('.')
      Paragraph('The picture bellow shows a DVH c...')   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:25 <paragraph>
           > (0,0,0,0,2) body
        MixedStyledText('The picture bellow shows a DVH c...')
          SingleStyledText('The picture bellow shows a DVH c...')
      Image('images/Cone_30_0_AP_3_mm.png')   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:29 <image>
           > (0,0,0,0,2) image
      Paragraph('The dicompyler-core algorithm do...')   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:30 <paragraph>
           > (0,0,0,0,2) body
        MixedStyledText('The dicompyler-core algorithm do...')
          SingleStyledText('The dicompyler-core algorithm do...')
          Superscript('3', style=TextStyle)   None:None <superscript>
            MixedStyledText('3')
              SingleStyledText('3')
          SingleStyledText(' or less. Its results are in clo...')
          AnnotatedText('analytical values', style='external link')   None:None <reference>
               > (0,0,1,0,1) external hyperlink
            MixedStyledText('analytical values')
              SingleStyledText('analytical values')
          AnnotatedText('')   None:None <target>
            MixedStyledText('')
          SingleStyledText('.')
#### DownExpandingContainer('footer')
  Footer('		3')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('		3')
      Tab('	')
      Tab('	')
      Field('3')
        SingleStyledText('3')
---------------------------------- page 4 ----------------------------------
#### ChainedContainer('column1')
  (continued) DocumentTree()
    (continued) Section(id='motivation')   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:14 <section>
         > (0,0,0,1,2) chapter
      Paragraph('3D representation of an analytic...')   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:34 <paragraph>
           > (0,0,0,0,2) body
      Image('images/cone_30_0_contours.png')   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:37 <image>
           > (0,0,0,0,2) image
      Paragraph('The collection of DVH test data ...')   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:38 <paragraph>
           > (0,0,0,0,2) body
        MixedStyledText('The collection of DVH test data ...')
          SingleStyledText('The collection of DVH test data ...')
          AnnotatedText('Canis Lupus LLC', style='external link')   None:None <reference>
               > (0,0,1,0,1) external hyperlink
            MixedStyledText('Canis Lupus LLC')
              SingleStyledText('Canis Lupus LLC')
          AnnotatedText('')   None:None <target>
            MixedStyledText('')
          SingleStyledText(' on the ')
          AnnotatedText('link', style='external link')   None:None <reference>
               > (0,0,1,0,1) external hyperlink
            MixedStyledText('link')
              SingleStyledText('link')
          AnnotatedText('')   None:None <target>
            MixedStyledText('')
          SingleStyledText('. More details ')
          AnnotatedText('here', style='external link')   None:None <reference>
               > (0,0,1,0,1) external hyperlink
            MixedStyledText('here')
              SingleStyledText('here')
          AnnotatedText('')   None:None <target>
            MixedStyledText('')
          SingleStyledText('.')
#### UpExpandingContainer('header')
  Header('Pyplanscoring Documentation, Rel...')
       > (0,0,0,0,2) header
         (0,0,0,0,1) body
    MixedStyledText('Pyplanscoring Documentation, Rel...')
      Field('Pyplanscoring Documentation')
        SingleStyledText('Pyplanscoring Documentation')
      SingleStyledText(', ')
      Field('Release 0.1.0')
        SingleStyledText('Release 0.1.0')
#### DownExpandingContainer('footer')
  Footer('4		Chapter 2.  Motivation')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('4		Chapter 2.  Motivation')
      Field('4')
        SingleStyledText('4')
      Tab('	')
      Tab('	')
      StringField('Chapter')
      SingleStyledText(' ')
      Field('2')
        SingleStyledText('2')
      SingleStyledText('.  ')
      Field('Motivation')
        SingleStyledText('Motivation')
---------------------------------- page 5 ----------------------------------
#### FlowablesContainer('chapter title')
  Paragraph('CHAPTER 3', style='body matter chapter label')
       > (0,0,1,0,2) body matter chapter label
         (0,0,0,0,2) body
    MixedStyledText('CHAPTER 3')
      MixedStyledText('CHAPTER ')
        StringField('CHAPTER')
        SingleStyledText(' ')
      Field('3', style='number')
           > (0,0,2,0,3) body matter chapter number
        SingleStyledText('3')
  Paragraph('Where to from here?', style='body matter chapter title')
       > (0,0,1,0,2) body matter chapter title
         (0,0,0,0,2) body
    Field('Where to from here?')
      SingleStyledText('Where to from here?')
#### ChainedContainer('column1')
  (continued) DocumentTree()
    Section(id='where-to-from-here')   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:43 <section>
         > (0,0,0,1,2) chapter
      Paragraph('If you’re new to this library, y...')   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:44 <paragraph>
           > (0,0,0,0,2) body
        MixedStyledText('If you’re new to this library, y...')
          SingleStyledText('If you’re new to this library, y...')
          AnnotatedText('user manual', style='internal link')   None:None <reference>
               > (0,0,1,0,1) internal hyperlink
            MixedStyledText('user manual')
              MixedStyledText('user manual')   None:None <inline>
                SingleStyledText('user manual')
          SingleStyledText(' page. If you’re already familia...')
      StaticGroupedFlowables()   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:None <compound>
        StaticGroupedFlowables(id='%user_manual')   None:None <start_of_file>
          Section(id='%user_manual#user-manual')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual.rst:2 <section>
            Heading('3.1 User Manual')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual.rst:2 <title>
                 > (0,0,0,1,2) heading level 2
                   (0,0,0,0,2) other heading levels
                MixedStyledText('3.1 User Manual')
                  SingleStyledText('3.1')
                  SingleStyledText(' ')
                  SingleStyledText('User Manual')
            Paragraph('The main class in this package i...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual.rst:6 <paragraph>
                 > (0,0,0,0,2) body
              MixedStyledText('The main class in this package i...')
                SingleStyledText('The main class in this package i...')
                MixedStyledText('PyPlanScoringAPI', style='monospaced')   None:None <literal>
                     > (0,0,1,0,1) monospaced
                  SingleStyledText('PyPlanScoringAPI')
                SingleStyledText('. Learning a few things about th...')
            StaticGroupedFlowables()   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual.rst:None <compound>
              StaticGroupedFlowables(id='%user_manual/installing')   None:None <start_of_file>
                Section(id='%user_manual/installing#installing')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:4 <section>
                  Heading('3.1.1 Installing')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:4 <title>
                       > (0,0,0,1,2) heading level 3
                         (0,0,0,0,2) other heading levels
                      MixedStyledText('3.1.1 Installing')
                        SingleStyledText('3.1.1')
                        SingleStyledText(' ')
                        SingleStyledText('Installing')
                  Paragraph('You can get pyplanscoring from i...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:6 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('You can get pyplanscoring from i...')
                      SingleStyledText('You can get ')
                      MixedStyledText('pyplanscoring', style='monospaced')   None:None <literal>
                           > (0,0,1,0,1) monospaced
                        SingleStyledText('pyplanscoring')
                      SingleStyledText(' from its current source on GitH...')
                      MixedStyledText('pyplanscoring', style='monospaced')   None:None <literal>
                           > (0,0,1,0,1) monospaced
                        SingleStyledText('pyplanscoring')
                      SingleStyledText(' is under active development, an...')
                  CodeBlock('git clone https://github.com/vic...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:11 <literal_block>
                       > (1,0,0,0,2) code block
                         (0,0,0,0,1) body
                    Token('git clone https://github.com/vic...', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('cd', type=Token.Name.Builtin)
                         > (0,0,0,1,2) (pygments)Token.Name.Builtin
                           (0,0,0,1,2) (pygments)Token.Name.Builtin
                    Token(' ./pyplanscoring\npython setup.py...', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                Section(id='%user_manual/installing#requirements')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:18 <section>
                  Heading('3.1.2 Requirements')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:18 <title>
                       > (0,0,0,1,2) heading level 3
                         (0,0,0,0,2) other heading levels
                      MixedStyledText('3.1.2 Requirements')
                        SingleStyledText('3.1.2')
                        SingleStyledText(' ')
                        SingleStyledText('Requirements')
                  Paragraph('PyPlanscoring as was designed to...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:20 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('PyPlanscoring as was designed to...')
                      SingleStyledText('PyPlanscoring as was designed to...')
                  Paragraph('Installing python using Anaconda...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:24 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('Installing python using Anaconda...')
                      SingleStyledText('Installing python using ')
                      AnnotatedText('Anaconda/Miniconda', style='external link')   None:None <reference>
                           > (0,0,1,0,1) external hyperlink
                        MixedStyledText('Anaconda/Miniconda')
                          SingleStyledText('Anaconda/Miniconda')
                      AnnotatedText('')   None:None <target>
                        MixedStyledText('')
                      SingleStyledText(' environment and conda-forge cha...')
                  CodeBlock('python>=3.6.0\npillow>=5.1.0\npydi...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:27 <literal_block>
                       > (1,0,0,0,2) code block
                         (0,0,0,0,1) body
                    Token('python>', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('3', type=Token.Literal.Number)
                         > (0,0,0,1,2) (pygments)Token.Literal.Number
                           (0,0,0,1,2) (pygments)Token.Literal.Number
                    Token('.6.0\npillow>', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('5', type=Token.Literal.Number)
                         > (0,0,0,1,2) (pygments)Token.Literal.Number
                           (0,0,0,1,2) (pygments)Token.Literal.Number
                    Token('.1.0\npydicom>', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('1', type=Token.Literal.Number)
                         > (0,0,0,1,2) (pygments)Token.Literal.Number
                           (0,0,0,1,2) (pygments)Token.Literal.Number
                    Token('.0.2\nnumba>', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('0', type=Token.Literal.Number)
                         > (0,0,0,1,2) (pygments)Token.Literal.Number
                           (0,0,0,1,2) (pygments)Token.Literal.Number
                    Token('.37.0\nnumpy>', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('1', type=Token.Literal.Number)
                         > (0,0,0,1,2) (pygments)Token.Literal.Number
                           (0,0,0,1,2) (pygments)Token.Literal.Number
                    Token('.12.1\nscipy>', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('1', type=Token.Literal.Number)
                         > (0,0,0,1,2) (pygments)Token.Literal.Number
                           (0,0,0,1,2) (pygments)Token.Literal.Number
                    Token('.0.0\npandas>', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('0', type=Token.Literal.Number)
                         > (0,0,0,1,2) (pygments)Token.Literal.Number
                           (0,0,0,1,2) (pygments)Token.Literal.Number
                    Token('.22.0\nquantities>', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('0', type=Token.Literal.Number)
                         > (0,0,0,1,2) (pygments)Token.Literal.Number
                           (0,0,0,1,2) (pygments)Token.Literal.Number
                    Token('.12.1\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                  Section(id='%user_manual/installing#optional')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:39 <section>
                    Heading('Optional')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:39 <title>
                         > (0,0,0,1,2) heading level 4
                           (0,0,0,0,2) other heading levels
                        MixedStyledText('Optional')
                          SingleStyledText('')
                          MixedStyledText('Optional')
                            SingleStyledText('Optional')
                    Paragraph('These packages have to be instal...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:40 <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('These packages have to be instal...')
                        SingleStyledText('These packages have to be instal...')
                    CodeBlock('matplotlib>=2.0.0\njoblib>=0.11\nv...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:43 <literal_block>
                         > (1,0,0,0,2) code block
                           (0,0,0,0,1) body
                      Token('matplotlib>', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('=', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('2', type=Token.Literal.Number)
                           > (0,0,0,1,2) (pygments)Token.Literal.Number
                             (0,0,0,1,2) (pygments)Token.Literal.Number
                      Token('.0.0\njoblib>', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('=', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('0', type=Token.Literal.Number)
                           > (0,0,0,1,2) (pygments)Token.Literal.Number
                             (0,0,0,1,2) (pygments)Token.Literal.Number
                      Token('.11\nvispy>', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                      Token('=', type=Token.Operator)
                           > (0,0,0,1,2) (pygments)Token.Operator
                             (0,0,0,1,2) (pygments)Token.Operator
                      Token('0', type=Token.Literal.Number)
                           > (0,0,0,1,2) (pygments)Token.Literal.Number
                             (0,0,0,1,2) (pygments)Token.Literal.Number
                      Token('.5.3\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
#### DownExpandingContainer('footer')
  Footer('		5')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('		5')
      Tab('	')
      Tab('	')
      Field('5')
        SingleStyledText('5')
---------------------------------- page 6 ----------------------------------
#### ChainedContainer('column1')
  (continued) DocumentTree()
    (continued) Section(id='where-to-from-here')   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:43 <section>
         > (0,0,0,1,2) chapter
      (continued) StaticGroupedFlowables()   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:None <compound>
        (continued) StaticGroupedFlowables(id='%user_manual')   None:None <start_of_file>
          (continued) Section(id='%user_manual#user-manual')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual.rst:2 <section>
            (continued) StaticGroupedFlowables()   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual.rst:None <compound>
              (continued) StaticGroupedFlowables(id='%user_manual/installing')   None:None <start_of_file>
                (continued) Section(id='%user_manual/installing#requirements')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:18 <section>
                  (continued) Section(id='%user_manual/installing#optional')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:39 <section>
                    (continued) CodeBlock('matplotlib>=2.0.0\njoblib>=0.11\nv...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:43 <literal_block>
                         > (1,0,0,0,2) code block
                           (0,0,0,0,1) body
                  Section(id='%user_manual/installing#conda-environment')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:50 <section>
                    Heading('conda environment')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:50 <title>
                         > (0,0,0,1,2) heading level 4
                           (0,0,0,0,2) other heading levels
                        MixedStyledText('conda environment')
                          SingleStyledText('')
                          MixedStyledText('conda environment')
                            SingleStyledText('conda environment')
                    Paragraph('It is possible to install all de...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:51 <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('It is possible to install all de...')
                        SingleStyledText('It is possible to install all de...')
                    CodeBlock('conda install -c conda-forge pil...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:53 <literal_block>
                         > (1,0,0,0,2) code block
                           (0,0,0,0,1) body
                      Token('conda install -c conda-forge pil...', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
                    Paragraph('After installing Anaconda/Minico...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:57 <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('After installing Anaconda/Minico...')
                        SingleStyledText('After installing ')
                        AnnotatedText('Anaconda/Miniconda', style='external link')   None:None <reference>
                             > (0,0,1,0,1) external hyperlink
                          MixedStyledText('Anaconda/Miniconda')
                            SingleStyledText('Anaconda/Miniconda')
                        AnnotatedText('')   None:None <target>
                          MixedStyledText('')
                        SingleStyledText(' Python 3.6.')
                  Section(id='%user_manual/installing#gpu-computing')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:60 <section>
                    Heading('GPU computing')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:60 <title>
                         > (0,0,0,1,2) heading level 4
                           (0,0,0,0,2) other heading levels
                        MixedStyledText('GPU computing')
                          SingleStyledText('')
                          MixedStyledText('GPU computing')
                            SingleStyledText('GPU computing')
                    Paragraph('There is an experimental support...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:61 <paragraph>
                         > (0,0,0,0,2) body
                      MixedStyledText('There is an experimental support...')
                        SingleStyledText('There is an experimental support...')
                        MixedStyledText('pyplanscoring.core.gpu_code', style='monospaced')   None:None <literal>
                             > (0,0,1,0,1) monospaced
                          SingleStyledText('pyplanscoring.core.gpu_code')
                        SingleStyledText('. DVH calculation kernels were w...')
                        AnnotatedText('Numba', style='external link')   None:None <reference>
                             > (0,0,1,0,1) external hyperlink
                          MixedStyledText('Numba')
                            SingleStyledText('Numba')
                        AnnotatedText('')   None:None <target>
                          MixedStyledText('')
                        SingleStyledText('. It supports CUDA GPU programmi...')
                    CodeBlock('conda install cudatoolkit\n')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/installing.rst:64 <literal_block>
                         > (1,0,0,0,2) code block
                           (0,0,0,0,1) body
                      Token('conda install cudatoolkit\n', type=Token.Text)
                           > (0,0,0,1,2) (pygments)Token.Text
                             (0,0,0,1,2) (pygments)Token.Text
              StaticGroupedFlowables(id='%user_manual/getting_started')   None:None <start_of_file>
                Section(id='%user_manual/getting_started#getting-started')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/getting_started.rst:4 <section>
                  Heading('3.1.3 Getting Started')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/getting_started.rst:4 <title>
                       > (0,0,0,1,2) heading level 3
                         (0,0,0,0,2) other heading levels
                      MixedStyledText('3.1.3 Getting Started')
                        SingleStyledText('3.1.3')
                        SingleStyledText(' ')
                        SingleStyledText('Getting Started')
                  Paragraph('This section is going to provide...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/getting_started.rst:6 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('This section is going to provide...')
                      SingleStyledText('This section is going to provide...')
                      MixedStyledText('pyplanscoring', style='monospaced')   None:None <literal>
                           > (0,0,1,0,1) monospaced
                        SingleStyledText('pyplanscoring')
                      SingleStyledText(' API. The main functionality is ...')
                      MixedStyledText('PyPlanScoringAPI', style='monospaced')   None:None <literal>
                           > (0,0,1,0,1) monospaced
                        SingleStyledText('PyPlanScoringAPI')
                      SingleStyledText(' class.')
                  Paragraph('Its constructor receives paths t...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/getting_started.rst:9 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('Its constructor receives paths t...')
                      SingleStyledText('Its constructor receives paths t...')
                  Paragraph('The method PyPlanScoringAPI.get_...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/getting_started.rst:12 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('The method PyPlanScoringAPI.get_...')
                      SingleStyledText('The method ')
                      MixedStyledText('PyPlanScoringAPI.get_structure_d...', style='monospaced')   None:None <literal>
                           > (0,0,1,0,1) monospaced
                        SingleStyledText('PyPlanScoringAPI.get_structure_d...')
                      SingleStyledText(' returns a dictionary with a cal...')
                  Paragraph('It is also possible to save calc...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/getting_started.rst:15 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('It is also possible to save calc...')
                      SingleStyledText('It is also possible to save calc...')
                      MixedStyledText('IOHandler', style='monospaced')   None:None <literal>
                           > (0,0,1,0,1) monospaced
                        SingleStyledText('IOHandler')
                      SingleStyledText('.')
                  CodeBlock('from pyplanscoring import PyPlan...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/getting_started.rst:18 <literal_block>
                       > (1,0,0,0,2) code block
                         (0,0,0,0,1) body
                    Token('from', type=Token.Keyword.Namespace)
                         > (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                           (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('pyplanscoring', type=Token.Name.Namespace)
                         > (0,0,0,1,2) (pygments)Token.Name.Namespace
                           (0,0,0,1,2) (pygments)Token.Name.Namespace
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('import', type=Token.Keyword.Namespace)
                         > (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                           (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('PyPlanScoringAPI', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(',', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('plot_dvh', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(',', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('plot_dvhs', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(',', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('IOHandler', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('# DVH calculation use-case', type=Token.Comment.Single)
                         > (0,0,0,1,2) (pygments)Token.Comment.Single
                           (0,0,0,1,2) (pygments)Token.Comment.Single
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('# RS file', type=Token.Comment.Single)
                         > (0,0,0,1,2) (pygments)Token.Comment.Single
                           (0,0,0,1,2) (pygments)Token.Comment.Single
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('rs_file', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token(''RT-Structure.dcm'', type=Token.Literal.String.Single)
                         > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                           (0,0,0,1,2) (pygments)Token.Literal.String.Single
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('# RD file', type=Token.Comment.Single)
                         > (0,0,0,1,2) (pygments)Token.Comment.Single
                           (0,0,0,1,2) (pygments)Token.Comment.Single
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('rd_file', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token(''RT-DOSE.dcm'', type=Token.Literal.String.Single)
                         > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                           (0,0,0,1,2) (pygments)Token.Literal.String.Single
                    Token('\n\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('pp', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('PyPlanScoringAPI', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('(', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('rs_file', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(',', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('rd_file', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(')', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('\n\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('#calculation parameters', type=Token.Comment.Single)
                         > (0,0,0,1,2) (pygments)Token.Comment.Single
                           (0,0,0,1,2) (pygments)Token.Comment.Single
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('end_cap_size', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('1.5', type=Token.Literal.Number.Float)
                         > (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                           (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('# mm', type=Token.Comment.Single)
                         > (0,0,0,1,2) (pygments)Token.Comment.Single
                           (0,0,0,1,2) (pygments)Token.Comment.Single
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('calc_grid', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('(', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('0.1', type=Token.Literal.Number.Float)
                         > (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                           (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                    Token(',', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('0.1', type=Token.Literal.Number.Float)
                         > (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                           (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                    Token(',', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('0.1', type=Token.Literal.Number.Float)
                         > (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                           (0,0,0,1,2) (pygments)Token.Literal.Number.Float
                    Token(')', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('  ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('# mm3', type=Token.Comment.Single)
                         > (0,0,0,1,2) (pygments)Token.Comment.Single
                           (0,0,0,1,2) (pygments)Token.Comment.Single
                    Token('\n\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('# calculating one structure DVH ...', type=Token.Comment.Single)
                         > (0,0,0,1,2) (pygments)Token.Comment.Single
                           (0,0,0,1,2) (pygments)Token.Comment.Single
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('dvh', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('pp', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('.', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('get_structure_dvh', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('(', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('roi_number', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('2', type=Token.Literal.Number.Integer)
                         > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                           (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                    Token(',', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('end_cap', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('end_cap_size', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(',', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('calc_grid', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('calc_grid', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(')', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('\n\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('# plotting DVH', type=Token.Comment.Single)
                         > (0,0,0,1,2) (pygments)Token.Comment.Single
                           (0,0,0,1,2) (pygments)Token.Comment.Single
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('plot_dvh', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('(', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('dvh', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(',', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token(''My DVH'', type=Token.Literal.String.Single)
                         > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                           (0,0,0,1,2) (pygments)Token.Literal.String.Single
                    Token(')', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('\n\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('# calculating DVH from all struc...', type=Token.Comment.Single)
                         > (0,0,0,1,2) (pygments)Token.Comment.Single
                           (0,0,0,1,2) (pygments)Token.Comment.Single
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('dvhs', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('pp', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('.', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('calc_dvhs', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('(', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('verbose', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('True', type=Token.Name.Builtin.Pseudo)
                         > (0,0,0,1,2) (pygments)Token.Name.Builtin.Pseudo
                           (0,0,0,1,2) (pygments)Token.Name.Builtin.Pseudo
                    Token(')', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('\n\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('# Plotting all DVHs in relative ...', type=Token.Comment.Single)
                         > (0,0,0,1,2) (pygments)Token.Comment.Single
                           (0,0,0,1,2) (pygments)Token.Comment.Single
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('plot_dvhs', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('(', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('dvhs', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(',', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token(''PyPlanScoring'', type=Token.Literal.String.Single)
                         > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                           (0,0,0,1,2) (pygments)Token.Literal.String.Single
                    Token(')', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('\n\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('# saving results in JSON text', type=Token.Comment.Single)
                         > (0,0,0,1,2) (pygments)Token.Comment.Single
                           (0,0,0,1,2) (pygments)Token.Comment.Single
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('obj', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('IOHandler', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('(', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('dvhs', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(')', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('output_file_path', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token(''plan_dvhs.dvh'', type=Token.Literal.String.Single)
                         > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                           (0,0,0,1,2) (pygments)Token.Literal.String.Single
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('obj', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('.', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('to_json_file', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('(', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('output_file_path', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(')', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
#### UpExpandingContainer('header')
  Header('Pyplanscoring Documentation, Rel...')
       > (0,0,0,0,2) header
         (0,0,0,0,1) body
    MixedStyledText('Pyplanscoring Documentation, Rel...')
      Field('Pyplanscoring Documentation')
        SingleStyledText('Pyplanscoring Documentation')
      SingleStyledText(', ')
      Field('Release 0.1.0')
        SingleStyledText('Release 0.1.0')
#### DownExpandingContainer('footer')
  Footer('6		Chapter 3.  Where to from her...')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('6		Chapter 3.  Where to from her...')
      Field('6')
        SingleStyledText('6')
      Tab('	')
      Tab('	')
      StringField('Chapter')
      SingleStyledText(' ')
      Field('3')
        SingleStyledText('3')
      SingleStyledText('.  ')
      Field('Where to from here?')
        SingleStyledText('Where to from here?')
---------------------------------- page 7 ----------------------------------
#### ChainedContainer('column1')
  (continued) DocumentTree()
    (continued) Section(id='where-to-from-here')   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:43 <section>
         > (0,0,0,1,2) chapter
      (continued) StaticGroupedFlowables()   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:None <compound>
        (continued) StaticGroupedFlowables(id='%user_manual')   None:None <start_of_file>
          (continued) Section(id='%user_manual#user-manual')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual.rst:2 <section>
            (continued) StaticGroupedFlowables()   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual.rst:None <compound>
              (continued) StaticGroupedFlowables(id='%user_manual/getting_started')   None:None <start_of_file>
                (continued) Section(id='%user_manual/getting_started#getting-started')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/getting_started.rst:4 <section>
                  Paragraph('This example shows a result usin...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/getting_started.rst:50 <paragraph>
                       > (0,0,0,0,2) body
                  Paragraph('Excample result:')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/getting_started.rst:53 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('Excample result:')
                      SingleStyledText('Excample result:')
                  Image('user_manual/../images/my_dvh.png')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/getting_started.rst:56 <image>
                       > (0,0,0,0,2) image
                  Paragraph('That’s it! You can move on to th...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/getting_started.rst:57 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('That’s it! You can move on to th...')
                      SingleStyledText('That’s it! You can move on to th...')
                      AnnotatedText('user manual', style='internal link')   None:None <reference>
                           > (0,0,1,0,1) internal hyperlink
                        MixedStyledText('user manual')
                          MixedStyledText('user manual')   None:None <inline>
                            SingleStyledText('user manual')
                      SingleStyledText(' to see what part of this librar...')
              StaticGroupedFlowables(id='%user_manual/dvh_metrics')   None:None <start_of_file>
                Section(id='%user_manual/dvh_metrics#dvh-metrics')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dvh_metrics.rst:4 <section>
                  Heading('3.1.4 DVH metrics')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dvh_metrics.rst:4 <title>
                       > (0,0,0,1,2) heading level 3
                         (0,0,0,0,2) other heading levels
                      MixedStyledText('3.1.4 DVH metrics')
                        SingleStyledText('3.1.4')
                        SingleStyledText(' ')
                        SingleStyledText('DVH metrics')
                  Paragraph('This section provides extended a...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dvh_metrics.rst:6 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('This section provides extended a...')
                      SingleStyledText('This section provides extended a...')
                      MixedStyledText('pyplanscoring', style='monospaced')   None:None <literal>
                           > (0,0,1,0,1) monospaced
                        SingleStyledText('pyplanscoring')
                      SingleStyledText(' API. PyPlanscoring has methods ...')
                      MixedStyledText('pyplanscoring.constraints', style='monospaced')   None:None <literal>
                           > (0,0,1,0,1) monospaced
                        SingleStyledText('pyplanscoring.constraints')
                      SingleStyledText('.')
                  Paragraph('It is possible to handle a singl...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dvh_metrics.rst:11 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('It is possible to handle a singl...')
                      SingleStyledText('It is possible to handle a singl...')
                      MixedStyledText('DVHMetrics', style='monospaced')   None:None <literal>
                           > (0,0,1,0,1) monospaced
                        SingleStyledText('DVHMetrics')
                  Paragraph('The recommended nomenclature is ...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dvh_metrics.rst:13 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('The recommended nomenclature is ...')
                      SingleStyledText('The recommended nomenclature is ...')
                      AnnotatedText('AAPM Report No. 263', style='external link')   None:None <reference>
                           > (0,0,1,0,1) external hyperlink
                        MixedStyledText('AAPM Report No. 263')
                          SingleStyledText('AAPM Report No. 263')
                      AnnotatedText('')   None:None <target>
                        MixedStyledText('')
                      SingleStyledText('.')
                  Paragraph('The user must set metrics in str...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dvh_metrics.rst:15 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('The user must set metrics in str...')
                      SingleStyledText('The user must set metrics in str...')
                  CodeBlock('from pyplanscoring import PyPlan...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dvh_metrics.rst:17 <literal_block>
                       > (1,0,0,0,2) code block
                         (0,0,0,0,1) body
                    Token('from', type=Token.Keyword.Namespace)
                         > (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                           (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('pyplanscoring', type=Token.Name.Namespace)
                         > (0,0,0,1,2) (pygments)Token.Name.Namespace
                           (0,0,0,1,2) (pygments)Token.Name.Namespace
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('import', type=Token.Keyword.Namespace)
                         > (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                           (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('PyPlanScoringAPI', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(',', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('DVHMetrics', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('\n\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('# DVH calculation use-case', type=Token.Comment.Single)
                         > (0,0,0,1,2) (pygments)Token.Comment.Single
                           (0,0,0,1,2) (pygments)Token.Comment.Single
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('# RS file', type=Token.Comment.Single)
                         > (0,0,0,1,2) (pygments)Token.Comment.Single
                           (0,0,0,1,2) (pygments)Token.Comment.Single
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('rs_file', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token(''RT-Structure.dcm'', type=Token.Literal.String.Single)
                         > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                           (0,0,0,1,2) (pygments)Token.Literal.String.Single
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('# RD file', type=Token.Comment.Single)
                         > (0,0,0,1,2) (pygments)Token.Comment.Single
                           (0,0,0,1,2) (pygments)Token.Comment.Single
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('rd_file', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token(''RT-DOSE.dcm'', type=Token.Literal.String.Single)
                         > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                           (0,0,0,1,2) (pygments)Token.Literal.String.Single
                    Token('\n\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
#### UpExpandingContainer('header')
  Header('		Pyplanscoring Documentation, R...')
       > (0,0,0,0,2) header
         (0,0,0,0,1) body
    MixedStyledText('		Pyplanscoring Documentation, R...')
      Tab('	')
      Tab('	')
      Field('Pyplanscoring Documentation')
        SingleStyledText('Pyplanscoring Documentation')
      SingleStyledText(', ')
      Field('Release 0.1.0')
        SingleStyledText('Release 0.1.0')
#### DownExpandingContainer('footer')
  Footer('3.1.  User Manual		7')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('3.1.  User Manual		7')
      Field('3.1')
        SingleStyledText('3.1')
      SingleStyledText('.  ')
      Field('User Manual')
        SingleStyledText('User Manual')
      Tab('	')
      Tab('	')
      Field('7')
        SingleStyledText('7')
---------------------------------- page 8 ----------------------------------
#### ChainedContainer('column1')
  (continued) DocumentTree()
    (continued) Section(id='where-to-from-here')   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:43 <section>
         > (0,0,0,1,2) chapter
      (continued) StaticGroupedFlowables()   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:None <compound>
        (continued) StaticGroupedFlowables(id='%user_manual')   None:None <start_of_file>
          (continued) Section(id='%user_manual#user-manual')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual.rst:2 <section>
            (continued) StaticGroupedFlowables()   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual.rst:None <compound>
              (continued) StaticGroupedFlowables(id='%user_manual/dvh_metrics')   None:None <start_of_file>
                (continued) Section(id='%user_manual/dvh_metrics#dvh-metrics')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dvh_metrics.rst:4 <section>
                  (continued) CodeBlock('from pyplanscoring import PyPlan...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dvh_metrics.rst:17 <literal_block>
                       > (1,0,0,0,2) code block
                         (0,0,0,0,1) body
                  Paragraph('That’s it! You can move on to th...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dvh_metrics.rst:51 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('That’s it! You can move on to th...')
                      SingleStyledText('That’s it! You can move on to th...')
                      AnnotatedText('user manual', style='internal link')   None:None <reference>
                           > (0,0,1,0,1) internal hyperlink
                        MixedStyledText('user manual')
                          MixedStyledText('user manual')   None:None <inline>
                            SingleStyledText('user manual')
                      SingleStyledText(' to see what part of this librar...')
              StaticGroupedFlowables(id='%user_manual/dicom_parsing')   None:None <start_of_file>
                Section(id='%user_manual/dicom_parsing#dicom-rt-parsing')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dicom_parsing.rst:4 <section>
                  Heading('3.1.5 DICOM-RT Parsing')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dicom_parsing.rst:4 <title>
                       > (0,0,0,1,2) heading level 3
                         (0,0,0,0,2) other heading levels
                      MixedStyledText('3.1.5 DICOM-RT Parsing')
                        SingleStyledText('3.1.5')
                        SingleStyledText(' ')
                        SingleStyledText('DICOM-RT Parsing')
                  Paragraph('PyPlanScoring inherited its dico...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dicom_parsing.rst:6 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('PyPlanScoring inherited its dico...')
                      SingleStyledText('PyPlanScoring inherited its dico...')
                      AnnotatedText('dicomparser', style='external link')   None:None <reference>
                           > (0,0,1,0,1) external hyperlink
                        MixedStyledText('dicomparser')
                          SingleStyledText('dicomparser')
                      AnnotatedText('')   None:None <target>
                        MixedStyledText('')
                      SingleStyledText(' module. The class that encapsul...')
                      MixedStyledText('PyDicomParser', style='monospaced')   None:None <literal>
                           > (0,0,1,0,1) monospaced
                        SingleStyledText('PyDicomParser')
                      SingleStyledText('.')
                  Paragraph('The method PyDicomParser.GetStru...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dicom_parsing.rst:9 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('The method PyDicomParser.GetStru...')
                      SingleStyledText('The method ')
                      MixedStyledText('PyDicomParser.GetStructures', style='monospaced')   None:None <literal>
                           > (0,0,1,0,1) monospaced
                        SingleStyledText('PyDicomParser.GetStructures')
                      SingleStyledText(' returns a dictionary object tha...')
                  CodeBlock('from pyplanscoring import PyDico...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dicom_parsing.rst:12 <literal_block>
                       > (1,0,0,0,2) code block
                         (0,0,0,0,1) body
                    Token('from', type=Token.Keyword.Namespace)
                         > (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                           (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('pyplanscoring', type=Token.Name.Namespace)
                         > (0,0,0,1,2) (pygments)Token.Name.Namespace
                           (0,0,0,1,2) (pygments)Token.Name.Namespace
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('import', type=Token.Keyword.Namespace)
                         > (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                           (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('PyDicomParser', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(',', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('PyStructure', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('\n\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('rs_file', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token(''DICOM-RTStructure.dcm'', type=Token.Literal.String.Single)
                         > (0,0,0,1,2) (pygments)Token.Literal.String.Single
                           (0,0,0,1,2) (pygments)Token.Literal.String.Single
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('rs_dcm', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('PyDicomParser', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('(', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('filename', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('rs_file', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(')', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('\n\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('structures', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('rs_dcm', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('.', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('GetStructures', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('()', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('  ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('# Dict like information of conto...', type=Token.Comment.Single)
                         > (0,0,0,1,2) (pygments)Token.Comment.Single
                           (0,0,0,1,2) (pygments)Token.Comment.Single
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                  Paragraph('PyPlanScoring provides the adapt...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dicom_parsing.rst:21 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('PyPlanScoring provides the adapt...')
                      SingleStyledText('PyPlanScoring provides the adapt...')
                      MixedStyledText('PyStructure', style='monospaced')   None:None <literal>
                           > (0,0,1,0,1) monospaced
                        SingleStyledText('PyStructure')
                      SingleStyledText(' to encapsulate methods that are...')
                      MixedStyledText('PyDicomParser.GetStructures', style='monospaced')   None:None <literal>
                           > (0,0,1,0,1) monospaced
                        SingleStyledText('PyDicomParser.GetStructures')
                      SingleStyledText(' method.')
                  CodeBlock('# encapsulate data on PyStructur...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dicom_parsing.rst:25 <literal_block>
                       > (1,0,0,0,2) code block
                         (0,0,0,0,1) body
                    Token('# encapsulate data on PyStructur...', type=Token.Comment.Single)
                         > (0,0,0,1,2) (pygments)Token.Comment.Single
                           (0,0,0,1,2) (pygments)Token.Comment.Single
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('structure', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('PyStructure', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('(', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('structures', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('[', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('1', type=Token.Literal.Number.Integer)
                         > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                           (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                    Token('])', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                  Paragraph('It is also possible to visualize...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dicom_parsing.rst:30 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('It is also possible to visualize...')
                      SingleStyledText('It is also possible to visualize...')
                      AnnotatedText('vispy', style='external link')   None:None <reference>
                           > (0,0,1,0,1) external hyperlink
                        MixedStyledText('vispy')
                          SingleStyledText('vispy')
                      AnnotatedText('')   None:None <target>
                        MixedStyledText('')
                      SingleStyledText(' package is installed. There is ...')
                      MixedStyledText('pyplanscoring.vis.contours3d', style='monospaced')   None:None <literal>
                           > (0,0,1,0,1) monospaced
                        SingleStyledText('pyplanscoring.vis.contours3d')
                      SingleStyledText('.')
                  CodeBlock('from pyplanscoring.vis.contours3...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dicom_parsing.rst:33 <literal_block>
                       > (1,0,0,0,2) code block
                         (0,0,0,0,1) body
                    Token('from', type=Token.Keyword.Namespace)
                         > (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                           (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('pyplanscoring.vis.contours3d', type=Token.Name.Namespace)
                         > (0,0,0,1,2) (pygments)Token.Name.Namespace
                           (0,0,0,1,2) (pygments)Token.Name.Namespace
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('import', type=Token.Keyword.Namespace)
                         > (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                           (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('plot_structure_contours', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('# encapsulate data on PyStructur...', type=Token.Comment.Single)
                         > (0,0,0,1,2) (pygments)Token.Comment.Single
                           (0,0,0,1,2) (pygments)Token.Comment.Single
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('structure', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('PyStructure', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('(', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('structures', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('[', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('1', type=Token.Literal.Number.Integer)
                         > (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                           (0,0,0,1,2) (pygments)Token.Literal.Number.Integer
                    Token('])', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('plot_structure_contours', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('(', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('structure', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('.', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('point_cloud', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(',', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('structure', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('.', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('name', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(')', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                  Paragraph('Example result of body contours ...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dicom_parsing.rst:41 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('Example result of body contours ...')
                      SingleStyledText('Example result of body contours ...')
#### UpExpandingContainer('header')
  Header('Pyplanscoring Documentation, Rel...')
       > (0,0,0,0,2) header
         (0,0,0,0,1) body
    MixedStyledText('Pyplanscoring Documentation, Rel...')
      Field('Pyplanscoring Documentation')
        SingleStyledText('Pyplanscoring Documentation')
      SingleStyledText(', ')
      Field('Release 0.1.0')
        SingleStyledText('Release 0.1.0')
#### DownExpandingContainer('footer')
  Footer('8		Chapter 3.  Where to from her...')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('8		Chapter 3.  Where to from her...')
      Field('8')
        SingleStyledText('8')
      Tab('	')
      Tab('	')
      StringField('Chapter')
      SingleStyledText(' ')
      Field('3')
        SingleStyledText('3')
      SingleStyledText('.  ')
      Field('Where to from here?')
        SingleStyledText('Where to from here?')
---------------------------------- page 9 ----------------------------------
#### ChainedContainer('column1')
  (continued) DocumentTree()
    (continued) Section(id='where-to-from-here')   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:43 <section>
         > (0,0,0,1,2) chapter
      (continued) StaticGroupedFlowables()   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:None <compound>
        (continued) StaticGroupedFlowables(id='%user_manual')   None:None <start_of_file>
          (continued) Section(id='%user_manual#user-manual')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual.rst:2 <section>
            (continued) StaticGroupedFlowables()   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual.rst:None <compound>
              (continued) StaticGroupedFlowables(id='%user_manual/dicom_parsing')   None:None <start_of_file>
                (continued) Section(id='%user_manual/dicom_parsing#dicom-rt-parsing')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dicom_parsing.rst:4 <section>
                  Image('user_manual/../images/body_contours.png')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dicom_parsing.rst:44 <image>
                       > (0,0,0,0,2) image
                  Paragraph('PyPlanScoring provides methods t...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dicom_parsing.rst:45 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('PyPlanScoring provides methods t...')
                      SingleStyledText('PyPlanScoring provides methods t...')
                      MixedStyledText('pyplanscoring.core.types.Dose3D', style='monospaced')   None:None <literal>
                           > (0,0,1,0,1) monospaced
                        SingleStyledText('pyplanscoring.core.types.Dose3D')
                      SingleStyledText(' adds a layer of abstraction on ...')
                      AnnotatedText('scipy.interpolate.RegularGridInt...', style='external link')   None:None <reference>
                           > (0,0,1,0,1) external hyperlink
                        MixedStyledText('scipy.interpolate.RegularGridInt...')
                          MixedStyledText('scipy.interpolate.RegularGridInt...', style='monospaced')   None:None <literal>
                               > (0,0,1,0,1) monospaced
                            SingleStyledText('scipy.interpolate.RegularGridInt...')
                      SingleStyledText(' to provide trilinear dose inter...')
                  Paragraph('There is a factory class pyplans...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dicom_parsing.rst:50 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('There is a factory class pyplans...')
                      SingleStyledText('There is a factory class ')
                      MixedStyledText('pyplanscoring.DoseAccumulation', style='monospaced')   None:None <literal>
                           > (0,0,1,0,1) monospaced
                        SingleStyledText('pyplanscoring.DoseAccumulation')
                      SingleStyledText(' to provide plan-sum capabilitie...')
                      MixedStyledText('pyplanscoring.core.types.Dose3D', style='monospaced')   None:None <literal>
                           > (0,0,1,0,1) monospaced
                        SingleStyledText('pyplanscoring.core.types.Dose3D')
                  Paragraph('It is possible to visualize axia...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dicom_parsing.rst:53 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('It is possible to visualize axia...')
                      SingleStyledText('It is possible to visualize axia...')
                  CodeBlock('from pyplanscoring import PyDico...')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dicom_parsing.rst:55 <literal_block>
                       > (1,0,0,0,2) code block
                         (0,0,0,0,1) body
                    Token('from', type=Token.Keyword.Namespace)
                         > (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                           (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('pyplanscoring', type=Token.Name.Namespace)
                         > (0,0,0,1,2) (pygments)Token.Name.Namespace
                           (0,0,0,1,2) (pygments)Token.Name.Namespace
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('import', type=Token.Keyword.Namespace)
                         > (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                           (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('PyDicomParser', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(',', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('DoseAccumulation', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('from', type=Token.Keyword.Namespace)
                         > (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                           (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('pyplanscoring.vis.slice3', type=Token.Name.Namespace)
                         > (0,0,0,1,2) (pygments)Token.Name.Namespace
                           (0,0,0,1,2) (pygments)Token.Name.Namespace
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('import', type=Token.Keyword.Namespace)
                         > (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                           (0,0,0,1,2) (pygments)Token.Keyword.Namespace
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('DoseSlice3D', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('\n\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('dose_files', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('[', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('"Plan1_dose.dcm"', type=Token.Literal.String.Double)
                         > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                           (0,0,0,1,2) (pygments)Token.Literal.String.Double
                    Token(',', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('"Boost.dcm"', type=Token.Literal.String.Double)
                         > (0,0,0,1,2) (pygments)Token.Literal.String.Double
                           (0,0,0,1,2) (pygments)Token.Literal.String.Double
                    Token(']', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('\n\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('rd_dcm', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('[', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('PyDicomParser', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('(', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('filename', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('dose_file', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(')', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('for', type=Token.Keyword)
                         > (0,0,0,1,2) (pygments)Token.Keyword
                           (0,0,0,1,2) (pygments)Token.Keyword
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('dose_file', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('in', type=Token.Operator.Word)
                         > (0,0,0,1,2) (pygments)Token.Operator.Word
                           (0,0,0,1,2) (pygments)Token.Operator.Word
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('dose_files', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(']', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('doses_obj', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('[', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('d', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('.', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('get_dose_3d', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('()', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('for', type=Token.Keyword)
                         > (0,0,0,1,2) (pygments)Token.Keyword
                           (0,0,0,1,2) (pygments)Token.Keyword
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('d', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('in', type=Token.Operator.Word)
                         > (0,0,0,1,2) (pygments)Token.Operator.Word
                           (0,0,0,1,2) (pygments)Token.Operator.Word
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('rd_dcm', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(']', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('\n\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('# using factory class to add 3d ...', type=Token.Comment.Single)
                         > (0,0,0,1,2) (pygments)Token.Comment.Single
                           (0,0,0,1,2) (pygments)Token.Comment.Single
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('acc', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('DoseAccumulation', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('(', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('doses_obj', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(')', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('dose_sum', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('acc', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('.', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('get_plan_sum', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('()', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('\n\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('# View the result', type=Token.Comment.Single)
                         > (0,0,0,1,2) (pygments)Token.Comment.Single
                           (0,0,0,1,2) (pygments)Token.Comment.Single
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('dose_view', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('=', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token(' ', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('DoseSlice3D', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('(', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('dose_sum', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token(')', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                    Token('dose_view', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('.', type=Token.Operator)
                         > (0,0,0,1,2) (pygments)Token.Operator
                           (0,0,0,1,2) (pygments)Token.Operator
                    Token('show', type=Token.Name)
                         > (0,0,0,1,2) (pygments)Token.Name
                           (0,0,0,1,2) (pygments)Token.Name
                    Token('()', type=Token.Punctuation)
                         > (0,0,0,1,2) (pygments)Token.Punctuation
                           (0,0,0,1,2) (pygments)Token.Punctuation
                    Token('\n', type=Token.Text)
                         > (0,0,0,1,2) (pygments)Token.Text
                           (0,0,0,1,2) (pygments)Token.Text
                  Paragraph('Example result:')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dicom_parsing.rst:74 <paragraph>
                       > (0,0,0,0,2) body
                    MixedStyledText('Example result:')
                      SingleStyledText('Example result:')
#### UpExpandingContainer('header')
  Header('		Pyplanscoring Documentation, R...')
       > (0,0,0,0,2) header
         (0,0,0,0,1) body
    MixedStyledText('		Pyplanscoring Documentation, R...')
      Tab('	')
      Tab('	')
      Field('Pyplanscoring Documentation')
        SingleStyledText('Pyplanscoring Documentation')
      SingleStyledText(', ')
      Field('Release 0.1.0')
        SingleStyledText('Release 0.1.0')
#### DownExpandingContainer('footer')
  Footer('3.1.  User Manual		9')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('3.1.  User Manual		9')
      Field('3.1')
        SingleStyledText('3.1')
      SingleStyledText('.  ')
      Field('User Manual')
        SingleStyledText('User Manual')
      Tab('	')
      Tab('	')
      Field('9')
        SingleStyledText('9')
---------------------------------- page 10 ----------------------------------
#### ChainedContainer('column1')
  (continued) DocumentTree()
    (continued) Section(id='where-to-from-here')   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:43 <section>
         > (0,0,0,1,2) chapter
      (continued) StaticGroupedFlowables()   /home/victor/Dropbox/Plan_Competition_Project/docs/index.rst:None <compound>
        (continued) StaticGroupedFlowables(id='%user_manual')   None:None <start_of_file>
          (continued) Section(id='%user_manual#user-manual')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual.rst:2 <section>
            (continued) StaticGroupedFlowables()   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual.rst:None <compound>
              (continued) StaticGroupedFlowables(id='%user_manual/dicom_parsing')   None:None <start_of_file>
                (continued) Section(id='%user_manual/dicom_parsing#dicom-rt-parsing')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dicom_parsing.rst:4 <section>
                  Image('user_manual/../images/Dose_3D_slices_view.png')   /home/victor/Dropbox/Plan_Competition_Project/docs/user_manual/dicom_parsing.rst:76 <image>
                       > (0,0,0,0,2) image
        StaticGroupedFlowables(id='%contributing')   None:None <start_of_file>
          Section(id='%contributing#contributing-to-pyplanscoring')   /home/victor/Dropbox/Plan_Competition_Project/docs/contributing.rst:2 <section>
            Heading('3.2 Contributing to PyPlanScorin...')   /home/victor/Dropbox/Plan_Competition_Project/docs/contributing.rst:2 <title>
                 > (0,0,0,1,2) heading level 2
                   (0,0,0,0,2) other heading levels
                MixedStyledText('3.2 Contributing to PyPlanScorin...')
                  SingleStyledText('3.2')
                  SingleStyledText(' ')
                  SingleStyledText('Contributing to PyPlanScoring')
            Paragraph('PyPlanScoring is a community-dri...')   /home/victor/Dropbox/Plan_Competition_Project/docs/contributing.rst:4 <paragraph>
                 > (0,0,0,0,2) body
              MixedStyledText('PyPlanScoring is a community-dri...')
                SingleStyledText('PyPlanScoring is a community-dri...')
                AnnotatedText('repository on GitHub', style='external link')   None:None <reference>
                     > (0,0,1,0,1) external hyperlink
                  MixedStyledText('repository on GitHub')
                    SingleStyledText('repository on GitHub')
                AnnotatedText('')   None:None <target>
                  MixedStyledText('')
                SingleStyledText('. Feel free to open issues for n...')
#### UpExpandingContainer('header')
  Header('Pyplanscoring Documentation, Rel...')
       > (0,0,0,0,2) header
         (0,0,0,0,1) body
    MixedStyledText('Pyplanscoring Documentation, Rel...')
      Field('Pyplanscoring Documentation')
        SingleStyledText('Pyplanscoring Documentation')
      SingleStyledText(', ')
      Field('Release 0.1.0')
        SingleStyledText('Release 0.1.0')
#### DownExpandingContainer('footer')
  Footer('10		Chapter 3.  Where to from he...')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('10		Chapter 3.  Where to from he...')
      Field('10')
        SingleStyledText('10')
      Tab('	')
      Tab('	')
      StringField('Chapter')
      SingleStyledText(' ')
      Field('3')
        SingleStyledText('3')
      SingleStyledText('.  ')
      Field('Where to from here?')
        SingleStyledText('Where to from here?')
---------------------------------- page 11 ----------------------------------
#### ChainedContainer('column1')
  StaticGroupedFlowables()
#### DownExpandingContainer('footer')
  Footer('		11')
       > (0,0,0,0,2) footer
         (0,0,0,0,1) body
    MixedStyledText('		11')
      Tab('	')
      Tab('	')
      Field('11')
        SingleStyledText('11')
